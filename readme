# LLM基本面分析代理

基于LLM的智能基本面分析系统，集成SEC财报抓取、XBRL解析、向量检索、LLM分析和量化回测的一站式解决方案。

## ✨ 主要功能

- 🏢 **SEC财报自动下载**: 自动获取10-K等财务报表
- 📊 **XBRL智能解析**: 提取和标准化财务数据
- 🧠 **LLM基本面分析**: GPT驱动的财务分析和风险评估
- 🔍 **向量检索**: FAISS/Pinecone支持的语义搜索
- 📈 **量化回测**: VectorBT驱动的策略回测
- 🎯 **投资信号生成**: Buy/Hold/Sell信号自动生成

## 🚀 快速开始

### 1. 环境要求

- Python 3.8+
- OpenAI API密钥
- 有效邮箱地址 (SEC下载要求)

### 2. 自动安装 (推荐)

#### Linux/Mac:
```bash
chmod +x setup.sh
./setup.sh
```

#### Windows:
```cmd
setup.bat
```

### 3. 手动安装

```bash
# 1. 创建虚拟环境
python -m venv venv
source venv/bin/activate  # Linux/Mac
# 或 venv\Scripts\activate  # Windows

# 2. 安装依赖
pip install -r requirements.txt

# 3. 配置环境变量
cp .env.example .env
# 编辑 .env 文件，填入真实配置
```

### 4. 配置环境变量

编辑 `.env` 文件：
```bash
# 必需配置
OPENAI_API_KEY=your_openai_api_key
USER_EMAIL=your_email@example.com

# 可选配置
MODEL_NAME=gpt-4o-mini
VECTOR_BACKEND=faiss
START_DATE=2020-01-01
END_DATE=2025-01-01
```

### 5. 运行测试

```bash
# 健康检查
python llm_fundamental_agent_fixed.py --health-check

# 单股票分析
python llm_fundamental_agent_fixed.py --mode single --ticker AAPL

# 批量分析
python llm_fundamental_agent_fixed.py --mode batch --tickers AAPL MSFT GOOGL AMZN
```

## 📖 使用指南

### 命令行参数

```bash
python llm_fundamental_agent_fixed.py [OPTIONS]

选项:
  --mode {single,batch}    运行模式 (默认: single)
  --ticker TEXT           单股票代码 (默认: AAPL)
  --tickers TEXT [TEXT]   批量股票代码列表
  --health-check          执行系统健康检查
  --verbose               详细日志输出
  --output TEXT           输出文件路径
  --help                  显示帮助信息
```

### 使用示例

```bash
# 分析苹果公司
python llm_fundamental_agent_fixed.py --mode single --ticker AAPL --verbose

# 批量分析科技股
python llm_fundamental_agent_fixed.py --mode batch --tickers AAPL MSFT GOOGL AMZN TSLA

# 保存结果到文件
python llm_fundamental_agent_fixed.py --mode single --ticker AAPL --output results.json

# 系统诊断
python llm_fundamental_agent_fixed.py --health-check
```

## 📁 项目结构

```
project/
├── llm_fundamental_agent_fixed.py  # 主程序
├── requirements.txt                # 依赖包列表
├── .env.example                   # 配置文件模板
├── alias_dictionary.csv           # XBRL字段映射
├── setup.sh                       # Linux/Mac安装脚本
├── setup.bat                      # Windows安装脚本
├── README.md                      # 说明文档
└── data/                          # 数据目录
    ├── filings/                   # SEC财报文件
    ├── fundamentals/              # 财务数据
    ├── prices/                    # 股价数据
    ├── signals/                   # 交易信号
    ├── backtest/                  # 回测结果
    ├── vector/                    # 向量数据库
    └── cache/                     # 缓存文件
```

## 🔧 配置说明

### 环境变量

| 变量名 | 必需 | 默认值 | 说明 |
|--------|------|--------|------|
| `OPENAI_API_KEY` | ✅ | - | OpenAI API密钥 |
| `USER_EMAIL` | ✅ | - | 用户邮箱 (SEC要求) |
| `MODEL_NAME` | ❌ | gpt-4o-mini | LLM模型名称 |
| `VECTOR_BACKEND` | ❌ | faiss | 向量后端 (faiss/pinecone) |
| `START_DATE` | ❌ | 2020-01-01 | 回测开始日期 |
| `END_DATE` | ❌ | 2025-01-01 | 回测结束日期 |
| `FEE_BPS` | ❌ | 10 | 交易成本 (基点) |

### XBRL字段映射

编辑 `alias_dictionary.csv` 自定义财务字段映射：

```csv
standard_field,xbrl_aliases,description
Revenue,"Revenues,TotalRevenues,NetSales",总收入
NetIncome,"NetIncomeLoss,NetIncomeAttributableToParent",净利润
...
```

## 📊 输出格式

### 单股票分析输出
```json
{
  "ticker": "AAPL",
  "processing_time": "2025-07-25T10:30:00",
  "fundamental_summary": "苹果公司Q4财报显示...",
  "financial_ratios": [
    {"ratio": "ROE", "value": 0.15, "description": "净资产收益率"},
    {"ratio": "GrossMargin", "value": 0.38, "description": "毛利率"}
  ],
  "signals": [
    {
      "date": "2025-07-25",
      "ticker": "AAPL",
      "signal": 1,
      "raw_signal": "Buy",
      "reason": "基本面强劲，现金流充裕",
      "risk": "市场估值偏高"
    }
  ],
  "backtest_results": {
    "Total Return [%]": 15.2,
    "Sharpe Ratio": 1.1,
    "Max Drawdown [%]": -8.5
  }
}
```

### 批量分析输出
```json
{
  "processing_time": "2025-07-25T10:30:00",
  "tickers_processed": ["AAPL", "MSFT", "GOOGL"],
  "tickers_failed": [],
  "total_signals": 3,
  "portfolio_backtest": {
    "total_return": 0.18,
    "cagr": 0.12,
    "max_drawdown": -0.15,
    "sharpe_ratio": 1.2
  },
  "summary": {
    "success_rate": 1.0,
    "buy_signals": 2,
    "sell_signals": 0,
    "hold_signals": 1
  }
}
```

## 🔍 系统架构

```mermaid
graph TD
    A[SEC数据下载] --> B[XBRL/HTML解析]
    B --> C[数据标准化]
    C --> D[财务比率计算]
    D --> E[向量化存储]
    E --> F[LLM基本面分析]
    G[价格数据获取] --> H[技术指标计算]
    F --> I[信号生成]
    H --> I
    I --> J[回测评估]
    J --> K[结果输出]
```

## 🛠 故障排除

### 常见问题

1. **LangChain导入错误**
   ```bash
   pip install --upgrade langchain langchain-openai
   ```

2. **SEC下载失败**
   - 检查 `USER_EMAIL` 环境变量
   - 确保邮箱格式正确

3. **XBRL解析失败**
   - 系统会自动降级到HTML解析
   - 检查网络连接

4. **价格数据获取失败**
   - 验证股票代码正确性
   - 检查Yahoo Finance可访问性

5. **内存不足**
   - 减少批量处理股票数量
   - 缩短回测时间窗口

### 性能优化

- 🚀 **使用FAISS**: 比Pinecone更快的本地向量存储
- 💾 **启用缓存**: 避免重复下载和计算
- 📉 **合理设置时间范围**: 减少回测数据量
- 🔄 **分批处理**: 每批3-5只股票

## 💰 成本估算

### 运行成本 (月度)
- **OpenAI API**: $50-200 (取决于使用频次)
- **Pinecone** (可选): $70+
- **计算资源**: $20-50
- **总计**: $70-320/月

### 成本优化建议
- 使用本地FAISS替代Pinecone
- 选择较便宜的OpenAI模型
- 启用LLM调用缓存

## 🚧 开发路线图

- [ ] 支持更多财务数据源
- [ ] 集成实时新闻情感分析
- [ ] 添加期权策略回测
- [ ] Web界面开发
- [ ] 云端部署支持
- [ ] 多语言支持

## 📄 许可证

MIT License - 详见 LICENSE 文件

## 🤝 贡献

欢迎提交Issue和Pull Request！

## ⚠️ 免责声明

本项目仅供学习和研究目的使用。所有投资决策应基于您自己的分析和判断。作者不对任何投资损失承担责任。

## 📞 支持

- 📧 邮箱: [联系邮箱]
- 💬 GitHub Issues: [项目地址]
- 📖 文档: [文档地址]

---

*让AI为您的投资决策赋能！* 🚀